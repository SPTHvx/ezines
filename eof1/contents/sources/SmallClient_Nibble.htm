<html><head><title>EOF ISSUE #0x01</title>
<style fprolloverstyle>A:hover {color: #D1F2C4; text-decoration: none}</style></head>
<body text="#E0E0E0" bgcolor="#131313" link="#BFBFBF" vlink="#BFBFBF" alink="#BFBFBF" style="font-size: 10pt">

<pre><hr>|| Author: Nibble/EOF || <a style="text-decoration: none" href="../mainmenu/sources.htm"><span style="text-decoration: none">Back to sources</span></a> || <a style="text-decoration: none" target="_blank" href="../binsrc/Nibble/Small/Client"><span style="text-decoration: none; color: #BFBF88">View project folder</span></a> || <hr></pre>
<pre>
//Client 
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;winsock.h&gt;
#include &lt;small.h&gt;

#include &quot;..\\Includes\\Includes.h&quot;
#include &quot;..\\Includes\\Small.h&quot;

//Function prototype
void Error(char*);

int sock;
char szFile[MAX_PATH];

BOOL bStop = FALSE;

//Get name from string something like this C:\test.exe
//Get only &quot;test.exe&quot; without full file location

char *GetName(char *szName)
{
 unsigned short i;

 for(i = lstrlen(szName);i&gt;0;i--)
 {
  if(szName[i-1] == '\\')
  {
   return &amp;szName[i];
  }
 }
 return &quot;&quot;;
}
//Thread for typing cmd
DWORD WINAPI TypeCmd(LPVOID param)
{
 char szbuff[MAX_BUFF];

 //Loop forever
 while(1)
 {
  //first char is DEFAULT_MARK
  szbuff[0] = DEFAULT_MARK;

  //Zero szbuff exept first char
  ZeroMemory(&amp;szbuff[1],MAX_BUFF-1);

  //gets string that we type
  gets(&amp;szbuff[1]);

  //if the string that we typed is DOWNLOAD string then copy name
  //of file that we want to download into szFile string
  if(strncmp(&amp;szbuff[1],DOWNLOAD,lstrlen(DOWNLOAD)) == 0)
  {
   szbuff[0] = DOWNLOAD_MARK;
   lstrcpy(szFile,GetName(&amp;szbuff[lstrlen(DOWNLOAD)+1]));
  }

  //Same thing for upload
  if(strncmp(&amp;szbuff[1],UPLOAD,lstrlen(UPLOAD)) == 0)
  {
   szbuff[0] = FILENAME_MARK;
   lstrcpy(szFile,&amp;szbuff[lstrlen(UPLOAD)+2]);
   lstrcpy(&amp;szbuff[1],GetName(szFile));
  }

  //Add END_MARK at end of szbuff
  lstrcat(szbuff,END_MARK);

  //if bStop == FALSE send szbuff to server
  if(bStop == FALSE)
  {
   send(sock,szbuff,lstrlen(szbuff),0);
  }

 }

 return 0;
}

//main function
int main()
{
 WSADATA wsa;
 struct sockaddr_in sin;
 unsigned short u_port;
 int u_size;
 char szhost[16];
 char szbuff[MAX_BUFF];

 HANDLE hFile;

 unsigned long ulWrite;
 unsigned int  uSize;
 unsigned int  uBytes = 0;

 unsigned int uSend;
 unsigned int uMove;
 unsigned int uMode;
 unsigned int uByteS;

 HANDLE hType;

  //initialize winsock library
  if(WSAStartup(0x101,&amp;wsa))
  {
   Error(&quot;Cannot initialize wsock library&quot;);
   return -1;
  }

  //Create socket
  sock = socket(AF_INET,SOCK_STREAM,0);

  //error -&gt; exit
  if(!sock)
  {
   Error(&quot;Cannot create socket\n&quot;);
   return -1;
  }

  //ask user for server info
  printf(&quot;Type IP adress\n--&gt; &quot;);
  scanf(&quot;%s&quot;,szhost);

  printf(&quot;Type port\n--&gt; &quot;);
  scanf(&quot;%d&quot;,&amp;u_port);

  //fill structure
  sin.sin_family=AF_INET; //TCP
  sin.sin_port=htons(u_port); //port
  sin.sin_addr.s_addr=inet_addr(szhost); //IP

  //try to connect on server | error -&gt; exit

  if(connect(sock,(SOCKADDR*)&amp;sin,sizeof(sin)) == -1)
  {
   Error(&quot;Cant connect&quot;);
   return 0;
  }

  //clear screan

  system(&quot;CLS&quot;);

  printf(&quot;Type commands\nPrint ctrl+c to exit\n&quot;);

  //CreateThread for typing cmd

  hType = CreateThread(0,0,&amp;TypeCmd,0,0,0);

  //loop forever
  while(1)
  {
   //zero szbuff
   ZeroMemory(szbuff,MAX_BUFF);
   
   //receive buffer from server
   u_size = recv(sock,szbuff,MAX_BUFF-1,0);

   //error -&gt; clean screan -&gt; print &quot;Disconnected&quot; -&gt; break
   if(u_size &lt;= 0)
   {
	system(&quot;CLS&quot;);
	Error(&quot;Disconnected&quot;);
	break;
   }

   //check what server send us

   switch(szbuff[0])
   {
	case DEFAULT_MARK:
		//normal cmd
		//print it but dont print DEFAULT_MARK
	     printf(&quot;%s&quot;,&amp;szbuff[1]);
	     break;

    case DOWNLOAD_MARK:
         
		//Open file for writing
		 hFile = CreateFile(szFile,GENERIC_WRITE,0,0,OPEN_ALWAYS,0,0);

		 //error -&gt; break
		 if(hFile == INVALID_HANDLE_VALUE) 
		 {
		  break;
		 }

		 //we cant type anything when download is in progress
		 bStop = TRUE;

		 //clean screen
		 system(&quot;CLS&quot;);

		 //calculate bytes that we receive - 1 char because
		 //string that we receive from server is also DOWNLOAD_MARK

		 uBytes += u_size-1;

		 //print download status
		 printf(&quot;Downloaded [ %d ] of [ %d ] bytes&quot;,uBytes,uSize);

		 //File downloaded ?
		 if(uBytes &gt;= uSize)
		 {
		  uBytes = 0;
		  printf(&quot;\n-=File Downloaded=-&quot;);
		  //enable typing thread
		  bStop = FALSE;
		 }

		 //set file pointer at end of file
		 SetFilePointer(hFile,0,0,FILE_END);

		 //write buffer to file
		 WriteFile(hFile,&amp;szbuff[1],u_size-1,&amp;ulWrite,0);

		 //zero szbuff
		 ZeroMemory(szbuff,MAX_BUFF);

		 //Close handle
		 CloseHandle(hFile);

	     break;

	case FILESIZE_MARK:
		 //convert szbuff to num
		 uBytes = 0;
		 uSize = atoi(&amp;szbuff[1]);
		 break;

    case UPLOAD_MARK:

		 //open File for reading
		 hFile = CreateFile(szFile,GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING,0,0);
		  
		 //error -&gt; exit
		 if(hFile == INVALID_HANDLE_VALUE)
		 {
		  break;
		 }

		 //GetFileSize
		 ulWrite = uSize = GetFileSize(hFile,0);

		 //Set first char to UPLOAD_MARK
		 szbuff[0] = UPLOAD_MARK;

		 //disable typing cmds
		 bStop = TRUE;

		 uBytes = 0;

		 //While uSize is positive
		 while(uSize)
		 {
		  //zero szbuff
		  ZeroMemory(&amp;szbuff[1],MAX_BUFF-1);

		  uSend = MAX_BUFF-2;

		  //...
		  if(uSend&gt;uSize)
		  {
		   uSend=uSize;
		  } 

		  //File uploaded ?
		  if((int)uSize &lt;= 0)
		  {
		   printf(&quot;\n-=File uploaded\nPress any key\n=-&quot;);
		   break;
		  }

		  uMove = 0-uSize;

		  //Set file pointer at uMove location
		  SetFilePointer(hFile,uMove,0,FILE_END);

		  //read part of file into szbuff
		  ReadFile(hFile,&amp;szbuff[1],uSend,&amp;uMode,0);

		  //send it to server
		  uByteS = send(sock,szbuff,uSend+1,0);

		  //calculate how much bytes are sended
		  uBytes += uSend;

		  //clear screen
		  system(&quot;CLS&quot;);
		  //print upload status
		  printf(&quot;Uploaded [%d] of [%d] bytes&quot;,uBytes,ulWrite);

		  //error -&gt; break
		  if(uByteS == SOCKET_ERROR)
		  {
		   break;
		  }

		  //substract from uSize sended bytes
		  uSize = uSize - uSend;

		 }

		 //Close handle
		 CloseHandle(hFile);

		 //Enable typing cmds
		 bStop = FALSE;

		 //Create Thread again
		 hType = CreateThread(0,0,&amp;TypeCmd,0,0,0);

		 uBytes = 0;

		 szbuff[0] = ENDF_MARK;
		 szbuff[1] = '\0';

		 //Send ENDF_MARK to stop upload progress to server
		 send(sock,szbuff,lstrlen(szbuff),0);

		 break;
   }
  }
  
  //print &quot;Disconnected...&quot;
  printf(&quot;Disconnected...\n&quot;);
  //Wait for pressing any key
  system(&quot;PAUSE&quot;);

  //Close socket
  closesocket(sock);
  WSACleanup();

 return 0;
}

//print some message between -=Message-= + pause
void Error(char *message)
{
 printf(&quot;-=%s\n=-&quot;,message);
 system(&quot;PAUSE&quot;);
}

//-------------Libs--------------
#pragma comment(lib,&quot;wsock32.lib&quot;)
</pre></body></html>