StaIT

Статистический анализ(атор) таблицы импорта
======================================================================================================================== 

StaIT.exe -file in_file -log log_file

Примеры вызова проги:
 Stait.exe -file "C:\Program Files" -log C:\mylog.txt
 Stait.exe -file C:\Games -log C:\mylog.log
 Stait.exe -file C:\ -log C:\01.txt

Поиск PE-файлов (exe/dll/scr) в указанной директории, а также во всех ее субдиректориях.
Получившийся список, отсортированный в порядке убывания количеств повторений длл и количеств повторений функий, записывается в указанный файл. 
=========================================================================================================================

ОБОЗНАЧЕНИЯ

Пример:

==================================================
INFO FROM PE32-FILES (IMPORT TABLE)
==================================================

==================================================
==================================================
1							// номер длл в данном списке
dll_name	=	kernel32.dll			// имя длл
count		=	4				// количество повторений dll (сколько раз встретилась эта длл во всех найденных PE-файлах)
num_func	=	167				// кол-во одинарных функций в данной длл (сколько разных одинарных (без повторений) функций, импортируемых данной длл, встретилось во всех найденных PE-файлах) 
num_all_func	=	213				// кол-во всех функций в данной длл (включая найденные повторения функций)
pr_dll		=	14.81481%			// процентное соотношение количеств всех найденных длл (например, для текущей длл = (count * 100%) / num_all_dll_in_list = (4 * 100) / 27 = 14.81481%)
pr_group_func	=	42.77108%			// процентное соотношение кол-ва всех функций в данной длл к кол-ву всех ф-ций во всех длл: (num_all_func * 100%) / num_all_func_in_list = (213 * 100) / 498 = 42.77108%  
==================================================
1 | 1							// первое число - это номер функи в текущей длл, а 2-ое число - номер функи во всем списке;
func_name	=	LoadLibraryA			// имя функции или ординал 
count		=	3				// кол-во повторений функи (сколько раз встретилась эта функа во всех найденных PE-файлах)
pr_for_this_dll	=	1.40845%			// процентное соотношение количества данной функи в данной длл к кол-ву всех функций в данной длл: (count * 100%) / num_all_func = (3 * 100) / 213 = 1.40845%
pr_for_all_dll	=	0.60241%			// процентное соотношение кол-ва данной функи в данной длл к кол-ву всех функций во всех длл: (count * 100%) / num_all_func_in_list = (3 * 100) / 498 = 0.60241% 
-----------------------------------
...
...
...
==================================================
==================================================
2							// etc
dll_name	=	user32.dll
count		=	3
num_func	=	81
num_all_func	=	82
pr_dll		=	11.11111%
pr_group_func	=	16.46586%
==================================================
1 | 168							// etc
func_name	=	GetDesktopWindow
count		=	2
pr_for_this_dll	=	2.43902%
pr_for_all_dll	=	0.40161%
-----------------------------------
2 | 169							// etc 
func_name	=	SetRect
count		=	1
pr_for_this_dll	=	1.21951%
pr_for_all_dll	=	0.20080%
-----------------------------------
...
...
...
==================================================
RESULT FROM LIST
==================================================
num_dll_in_list		=	18			// кол-во одинарных длл во всем списке
num_all_dll_in_list	=	27			// кол-во всех длл во всем списке (dll.sum += dll.count); 
num_func_in_list	=	445			// кол-во одинарных функций во всем списке;
num_all_func_in_list	=	498			// кол-во всех фунок во всем списке (func.sum += func.count);   
==================================================


==================================================================
 Вирмэйкинг для себя...искусство вечно
==================================================================
VX 
